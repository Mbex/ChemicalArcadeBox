{"version":3,"sources":["app.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Molecule","id","this","class","mass","position","x","Math","floor","random","w","y","h","velocity","dx","round","dy","console","log","move","molecule","boundary_bounce","r_boundary","l_boundary","t_boundary","b_boundary","move_svg_molecules","d3","selectAll","transition","delay","time_step","each","select","attr","m","molecules_data","dataset","Array","apply","map","_","svg","append","style","push","data","enter","window","setInterval"],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar w = 800;\nvar h = w\nvar padding = 0.05 * w;\nvar N = 5;\nvar dataset = Array.apply(null, Array(N)).map(function (_, i) {return i;});;\nvar molecules_data = [];\nvar time_step = 5;\nvar svg = d3.select(\"body\")\n          .append(\"svg\")\n          .attr(\"width\", w)\n          .attr(\"height\", h)\n          .attr(\"border\", 1);\nvar borderPath = svg.append(\"rect\")\n     \t\t\t.attr(\"x\", 0)\n     \t\t\t.attr(\"y\", 0)\n     \t\t\t.attr(\"height\", h)\n     \t\t\t.attr(\"width\", w)\n     \t\t\t.style(\"stroke\", \"black\")\n     \t\t\t.style(\"fill\", \"none\")\n     \t\t\t.style(\"stroke-width\", 1);\n\nfunction Molecule(id) {\n  /* molecule object */\n  this.id = id;\n  this.class = \"molecule\";\n  this.mass = 50;\n  this.r = 20;\n  this.position = {x : Math.floor(Math.random()*(w - this.r*2) + this.r),\n                   y : Math.floor(Math.random()*(h - this.r*2) + this.r)\n                 }\n  this.velocity = {dx : Math.round(10 * (-1 + Math.round(Math.random())))+1,\n                   dy : Math.round(10 * (-1 + Math.round(Math.random())))+1\n                 };\n  console.log(this.position)\n  return this;\n};\n\nfunction move(molecule) {\n  /* Moves molecule */\n  molecule.position.x += molecule.velocity.dx;\n  molecule.position.y += molecule.velocity.dy;\n  return molecule;\n};\n\nfunction boundary_bounce(molecule) {\n  /* changes x, y position if molecule hits boundary of svg  */\n  var r_boundary = (molecule.position.x + molecule.r >= w);\n  var l_boundary = (molecule.position.x - molecule.r <= 0);\n  var t_boundary = (molecule.position.y - molecule.r <= 0);\n  var b_boundary = (molecule.position.y + molecule.r >= h);\n  if (l_boundary | r_boundary){\n    molecule.velocity.dx = -molecule.velocity.dx;\n  };\n  if (t_boundary | b_boundary){\n    molecule.velocity.dy = -molecule.velocity.dy;\n  };\n  return molecule;\n};\n\nfor (id in dataset){\n  var m = new Molecule(id);\n  molecules_data.push(m);\n}\n\nvar molecules_svg = svg.selectAll(\"circle\")\n   .data(molecules_data)\n   .enter()\n   .append(\"circle\")\n   .attr(\"id\", function(m) { return m.id; })\n   .attr(\"r\", function(m) { return m.r; })\n   .attr(\"cx\", function(m) { return m.position.x; })\n   .attr(\"cy\", function(m) { return m.position.y; })\n   .attr(\"class\", function(m) { return m.class; })\n\n\n\nfunction move_svg_molecules() {\n\n  d3.selectAll(\".molecule\")\n    .transition()\n    .delay(time_step)\n    .each(\"start\", function() {\n      d3.select(this).attr(\"cx\", function(m) {\n         return molecules_data[this.id].position.x;\n       });\n      d3.select(this).attr(\"cy\", function(m) {\n         return molecules_data[this.id].position.y;\n       });\n     });\n//     // .each(\"end\", function() {\n//   //   d3.select(this).transition().duration(time_step)\n//   //   .attr(\"cx\", function(m) { return move(m).position.x; })\n//   //   .each(\"end\", function(){ move_molecules(); })\n//     // })\n// // };\n}\n\n\n\nfunction Run(){\n  window.setInterval( function () {\n\n    for (i in molecules_data){\n        molecules_data[i] = move(molecules_data[i]);\n        molecules_data[i] = boundary_bounce(molecules_data[i]);\n        move_svg_molecules();\n    }\n  }, time_step);\n\n}//endfunction\n\nRun();\n\n// function collision_ids(molecule) {\n//\n//   /*  returns list of ids of molecules that have\n//   collided with molecule argument.  */\n//\n//   ids = []\n//   for (m in molecules){\n//     if (molecule.id != m.id){\n//       if(((molecule.position.x + molecule.r  <= m.position.x - m.r) |\n//           (molecule.position.x - molecule.r  <= m.position.x - m.r)) &\n//          ((molecule.position.y + molecule.r  <= m.position.y - m.r) |\n//           (molecule.position.y - molecule.r  <= m.position.y - m.r))) {\n//             nearest_neighbours.push(m.id);\n//       };\n//     };\n//   };\n//   return ids;\n// };\n //\n // window.setInterval(function(){\n //   move(m);\n //   boundary_bounce(m);\n //   circle.transition()\n //          .attr(\"cx\", m.position.x)\n //          .attr(\"cy\", m.position.y);\n //   console.log(m.position)\n\n // }, time_step);\n\n\n    // .each(function(m){\n    //   // .attr(\"cx\", m.position.x)\n    //   console.log(m);\n    //   .attr(\"r\", 5)\n    //\n    // });\n\n\n// svg.selectAll(\"circle\")\n//    .data(dataset)\n//    .enter()\n//    .append(\"circle\")\n//    .attr(\"cx\", function(d) {\n//         return xScale(d[0]);\n//     })\n//     .attr(\"cy\", function(d) {\n//         return yScale(d[1]);\n//     })\n//     .attr(\"r\",  function(d) {\n//         return rScale(d[1]);\n//     });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// INITIALISE MOLECULES IN SVG\n\n\n\n\n\n\n\n// var circle = svg.append(\"circle\")\n//     .attr(\"id\", \"circ\")\n//     .attr(\"cx\", Math.random() * 200)\n//     .attr(\"cy\", Math.random() * 200)\n//     .attr(\"r\", 10 + \"px\")\n\n\n\n\n//\n// var dataset = [];\n// var numDataPoints = 50;\n// var xRange = Math.random() * 1000;\n// var yRange = Math.random() * 1000;\n// for (var i = 0; i < numDataPoints; i++) {\n//     var newNumber1 = Math.round(Math.random() * xRange);\n//     var newNumber2 = Math.round(Math.random() * yRange);\n//     dataset.push([newNumber1, newNumber2]);\n// }\n//\n// var w = 600;\n// var h = 300;\n// var padding = 30;\n//\n//\n// //Create SVG element\n// var svg = d3.select(\"body\")\n//             .append(\"svg\")\n//             .attr(\"width\", w)\n//             .attr(\"height\", h);\n//\n// var xScale = d3.scale.linear()\n//                      .domain([0, d3.max(dataset, function(d) {\n//                         return d[0];\n//                       })])\n//                      .range([padding, w - (padding*5)]);\n// var yScale = d3.scale.linear()\n//                      .domain([0, d3.max(dataset, function(d) {\n//                         return d[1];\n//                       })])\n//                      .range([h - padding, padding]);\n// var rScale = d3.scale.linear()\n//                      .domain([0, d3.max(dataset, function(d) {\n//                        return (d[1]*d[0])/1000;\n//                       })])\n//                      .range([2, 5]);\n//\n//\n// svg.selectAll(\"circle\")\n//    .data(dataset)\n//    .enter()\n//    .append(\"circle\")\n//    .attr(\"cx\", function(d) {\n//         return xScale(d[0]);\n//     })\n//     .attr(\"cy\", function(d) {\n//         return yScale(d[1]);\n//     })\n//     .attr(\"r\",  function(d) {\n//         return rScale(d[1]);\n//     });\n//\n//\n// svg.selectAll(\"text\")\n//        .data(dataset)\n//        .enter()\n//        .append(\"text\")\n//        .text(function(d) {\n//             return d[0] + \",\" + d[1];\n//        })\n//        .attr(\"x\", function(d) {\n//             return xScale(d[0]);\n//             })\n//         .attr(\"y\", function(d) {\n//             return yScale(d[1]);\n//           })\n//        .attr(\"font-family\", \"sans-serif\")\n//        .attr(\"font-size\", \"11px\")\n//        .attr(\"fill\", \"red\");\n//\n// var xAxis = d3.svg.axis()\n//                   .scale(xScale)\n//                   .orient(\"bottom\")\n//                   .ticks(5);  //Set rough # of ticks\n//\n// var yAxis = d3.svg.axis()\n//                   .scale(yScale)\n//                   .orient(\"left\")\n//                   .ticks(5);\n//\n// svg.append(\"g\")\n//     .attr(\"class\", \"axis\")  //Assign \"axis\" class\n//     .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n//     .call(xAxis);\n//\n// svg.append(\"g\")\n//     .attr(\"class\", \"axis\")\n//     .attr(\"transform\", \"translate(\" + padding + \",0)\")\n//     .call(yAxis);\n\n// var width = 610,\n//     height = 640;\n//\n// var nodes = d3.range(50).map(function() {\n//    return {radius: Math.random() * 12 + 4};\n//  }),\n//     root = nodes[0],\n//     color = d3.scale.category10();\n//\n// root.radius = 0;\n// root.fixed = true;\n//\n// var force = d3.layout.force()\n//     .gravity(0)\n//     .charge(function(d, i) { return i ? 0 : -2000; })\n//     .nodes(nodes)\n//     .size([width, height]);\n//\n// force.start();\n//\n// var svg = d3.select(\"body\").append(\"svg\")\n//     .attr(\"width\", width)\n//     .attr(\"height\", height);\n//\n// svg.selectAll(\"circle\")\n//     .data(nodes.slice(1))\n//   .enter().append(\"circle\")\n//     .attr(\"r\", function(d) { return d.radius; })\n//     .style(\"fill\", function(d, i) { return color(i % 3); });\n//\n// force.on(\"tick\", function(e) {\n//   var q = d3.geom.quadtree(nodes),\n//       i = 0,\n//       n = nodes.length;\n//\n//   while (++i < n) q.visit(collide(nodes[i]));\n//\n//   svg.selectAll(\"circle\")\n//       .attr(\"cx\", function(d) { return d.x; })\n//       .attr(\"cy\", function(d) { return d.y; });\n// });\n//\n// svg.on(\"mousemove\", function() {\n//   var p1 = d3.mouse(this);\n//   root.px = p1[0];\n//   root.py = p1[1];\n//   force.resume();\n// });\n//\n// function collide(node) {\n//   var r = node.radius + 16,\n//       nx1 = node.x - r,\n//       nx2 = node.x + r,\n//       ny1 = node.y - r,\n//       ny2 = node.y + r;\n//   return function(quad, x1, y1, x2, y2) {\n//     if (quad.point && (quad.point !== node)) {\n//       var x = node.x - quad.point.x,\n//           y = node.y - quad.point.y,\n//           l = Math.sqrt(x * x + y * y),\n//           r = node.radius + quad.point.radius;\n//       if (l < r) {\n//         l = (l - r) / l * .5;\n//         node.x -= x *= l;\n//         node.y -= y *= l;\n//         quad.point.x += x;\n//         quad.point.y += y;\n//       }\n//     }\n//     return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;\n//   };\n// }\n//\n\n},{}]},{},[1]);\n"]}